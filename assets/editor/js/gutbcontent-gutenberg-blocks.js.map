{"version":3,"names":[],"mappings":"","sources":["gutbcontent-gutenberg-blocks.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.registerCustomCTABlock = void 0;\n\n/*\r\n* Package Gutbcontent plugin\r\n* Page Editor: Gutenberg - Content Block Custom Call-To-Action (CTA)\r\n* */\n\n/* Utilize resources built by WordPress */\n//import { registerBlockType } from '@wordpress/blocks'; // no need since can ultilize WordPress sources\n//import React from \"react\";\nvar registerBlockType = wp.blocks.registerBlockType; //OK\n\nvar _wp$editor = wp.editor,\n    RichText = _wp$editor.RichText,\n    InspectorControls = _wp$editor.InspectorControls,\n    ColorPalette = _wp$editor.ColorPalette,\n    MediaUpload = _wp$editor.MediaUpload,\n    InnerBlocks = _wp$editor.InnerBlocks,\n    BlockControls = _wp$editor.BlockControls,\n    AlignmentToolbar = _wp$editor.AlignmentToolbar;\nvar _wp$components = wp.components,\n    PanelBody = _wp$components.PanelBody,\n    IconButton = _wp$components.IconButton,\n    RangeControl = _wp$components.RangeControl; // pre-defined Gutenberg button blocks. \n\nvar ALLOWED_BLOCKS = ['core/button']; //import registerBlockType from wp.blocks; // Equivalent statement but not work.\n\n/* \r\nDeclare function to register Gutenberg custom Call-To-Action content block. \r\nThis function needs to be exported in the end of JS ES5 scripts enqueued in WordPress */\n\nvar registerCustomCTABlock = function registerCustomCTABlock() {\n  return registerBlockType('gutbcontent/custom-cta', {\n    // 1. Built-in attributes\n    title: 'GutbContent Call To Action',\n    description: 'A custom Gutenberg block to generate custom Call-to-Action elements for Gutenberg editor',\n    icon: 'format-image',\n    keywords: \"Call-To-Action\",\n    category: 'layout',\n    // 2. Custom attributes\n    attributes: {\n      blockTitle: {\n        type: 'string',\n        source: 'html',\n        selector: 'h3'\n      },\n      blockTitleAlignment: {\n        type: 'string',\n        \"default\": 'none'\n      },\n      blockTitleColor: {\n        type: 'string',\n        \"default\": 'black'\n      },\n      featuredImage: {\n        type: 'string',\n        \"default\": null\n      },\n      overlayColor: {\n        type: 'string',\n        \"default\": 'black'\n      },\n      overlayOpacity: {\n        type: 'number',\n        \"default\": 0.3\n      },\n      blockBody: {\n        type: 'string',\n        source: 'html',\n        selector: 'p'\n      },\n      blockBodyAlignment: {\n        type: 'string',\n        \"default\": 'none'\n      }\n    },\n    // 3. Custom functions\n    // 3.1. Built-in functions\n    edit: function edit(_ref) {\n      var attributes = _ref.attributes,\n          setAttributes = _ref.setAttributes;\n      // Pulling properties from attributes\n      var blockTitle = attributes.blockTitle,\n          blockTitleColor = attributes.blockTitleColor,\n          blockTitleAlignment = attributes.blockTitleAlignment,\n          featuredImage = attributes.featuredImage,\n          overlayColor = attributes.overlayColor,\n          overlayOpacity = attributes.overlayOpacity,\n          blockBody = attributes.blockBody,\n          blockBodyAlignment = attributes.blockBodyAlignment; // Custom functions\n      // 1. Title\n\n      function updateBlockTitle(newTitle) {\n        setAttributes({\n          blockTitle: newTitle\n        });\n      }\n\n      function updateBlockTitleColor(newTitleColor) {\n        setAttributes({\n          blockTitleColor: newTitleColor\n        });\n      }\n\n      function updateBlockTitleAlignment(newAlignment) {\n        setAttributes({\n          blockTitleAlignment: newAlignment == undefined ? 'none' : newAlignment\n        });\n      } // 2. Featured image\n\n\n      function updateFeaturedImage(newImage) {\n        //console.log(newImage);\n        setAttributes({\n          featuredImage: newImage.sizes.full.url\n        });\n      }\n\n      function updateOverlayColor(newColor) {\n        setAttributes({\n          overlayColor: newColor\n        });\n      }\n\n      function updateOverlayOpacity(newOpacity) {\n        setAttributes({\n          overlayOpacity: newOpacity\n        });\n      } // 3. Body \n\n\n      function updateBlockBody(newBodyContent) {\n        setAttributes({\n          blockBody: newBodyContent\n        });\n      }\n\n      function updateBlockBodyAlignment(newAlignment) {\n        setAttributes({\n          blockBodyAlignment: newAlignment == undefined ? 'none' : newAlignment\n        });\n      }\n\n      return [/*#__PURE__*/React.createElement(InspectorControls, {\n        style: {\n          marginTop: '1em',\n          marginBottom: '1em'\n        }\n      }, /*#__PURE__*/React.createElement(PanelBody, {\n        title: 'Set title\\'s text color',\n        style: {\n          marginTop: '0.5em',\n          marginBottom: '0.5em'\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Select a color for the title :\")), /*#__PURE__*/React.createElement(ColorPalette, {\n        value: blockTitleColor,\n        onChange: updateBlockTitleColor\n      })), /*#__PURE__*/React.createElement(PanelBody, {\n        title: 'Block\\'s featured image setting',\n        style: {\n          marginTop: '0.5em',\n          marginBottom: '0.5em'\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Select featured image for content block :\")), /*#__PURE__*/React.createElement(MediaUpload, {\n        onSelect: updateFeaturedImage,\n        type: \"image\",\n        value: featuredImage,\n        render: function render(_ref2) {\n          var open = _ref2.open;\n          return [/*#__PURE__*/React.createElement(IconButton, {\n            onClick: open,\n            icon: \"upload\",\n            style: {\n              border: '2px groove grey'\n            },\n            className: \"editor-media-placeholder__button is-button is-large\"\n          }, \"Select featured image\")];\n        }\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          marginTop: '0.5em',\n          marginBottom: '0.5em'\n        }\n      }, /*#__PURE__*/React.createElement(\"p\", null, /*#__PURE__*/React.createElement(\"strong\", null, \"Overlay color :\")), /*#__PURE__*/React.createElement(ColorPalette, {\n        value: overlayColor,\n        onChange: updateOverlayColor\n      })), /*#__PURE__*/React.createElement(RangeControl, {\n        label: 'Overlay Opacity',\n        value: overlayOpacity,\n        onChange: updateOverlayOpacity,\n        min: 0,\n        max: 0.9,\n        step: 0.01\n      }))), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"custom-cta-container\",\n        style: {\n          border: '2px groove grey'\n        }\n      }, /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cta-image-container\",\n        style: {\n          backgroundImage: \"url(\".concat(featuredImage, \")\")\n        }\n      }, /*#__PURE__*/React.createElement(BlockControls, null, /*#__PURE__*/React.createElement(\"p\", null, \"Align Title\"), /*#__PURE__*/React.createElement(AlignmentToolbar, {\n        value: blockTitleAlignment,\n        onChange: updateBlockTitleAlignment\n      })), /*#__PURE__*/React.createElement(RichText, {\n        key: \"editable\",\n        tagName: \"h3\",\n        className: \"custom-cta-title\",\n        placeholder: \"Write your Call-To-Action title\",\n        value: blockTitle,\n        onChange: updateBlockTitle,\n        style: {\n          color: blockTitleColor,\n          textAlign: blockTitleAlignment\n        }\n      }), /*#__PURE__*/React.createElement(InnerBlocks, {\n        allowedBlocks: ALLOWED_BLOCKS\n      }), /*#__PURE__*/React.createElement(\"div\", {\n        className: \"cta-image-overlay\",\n        style: {\n          backgroundColor: overlayColor,\n          opacity: overlayOpacity\n        }\n      })), /*#__PURE__*/React.createElement(BlockControls, null, /*#__PURE__*/React.createElement(\"p\", null, \"Align Description\"), /*#__PURE__*/React.createElement(AlignmentToolbar, {\n        value: blockBodyAlignment,\n        onChange: updateBlockBodyAlignment\n      })), /*#__PURE__*/React.createElement(RichText, {\n        key: \"editable\",\n        tagName: \"p\",\n        className: \"custom-cta-description\",\n        placeholder: \"Write your Call-To-Action description within few sentences.\",\n        value: blockBody,\n        onChange: updateBlockBody,\n        style: {\n          textAlign: blockBodyAlignment\n        }\n      }))];\n    },\n    // 3.2. Save methods\n    save: function save(_ref3) {\n      var attributes = _ref3.attributes;\n      // Pulling properties from attributes\n      var blockTitle = attributes.blockTitle,\n          blockTitleColor = attributes.blockTitleColor,\n          blockTitleAlignment = attributes.blockTitleAlignment,\n          blockBody = attributes.blockBody,\n          blockBodyAlignment = attributes.blockBodyAlignment,\n          featuredImage = attributes.featuredImage,\n          overlayColor = attributes.overlayColor,\n          overlayOpacity = attributes.overlayOpacity;\n      return /*#__PURE__*/React.createElement(\"div\", {\n        \"class\": \"gutbcontent-wrapper custom-cta-container\",\n        style: {\n          border: '2px groove grey'\n        }\n      }, /*#__PURE__*/React.createElement(\"label\", null, \"CTA title :\"), /*#__PURE__*/React.createElement(\"div\", {\n        \"class\": \"gutbcontent-featured-image\",\n        style: {\n          backgroundImage: \"url(\" + featuredImage + \")\"\n        }\n      }, /*#__PURE__*/React.createElement(\"h3\", {\n        style: {\n          color: blockTitleColor,\n          textAlign: blockTitleAlignment\n        }\n      }, blockTitle), /*#__PURE__*/React.createElement(InnerBlocks.Content, null), /*#__PURE__*/React.createElement(\"div\", {\n        \"class\": \"cta-image-overlay\",\n        style: {\n          backgroundColor: overlayColor,\n          opacity: overlayOpacity\n        }\n      })), /*#__PURE__*/React.createElement(\"label\", null, \"CTA description :\"), /*#__PURE__*/React.createElement(RichText.Content, {\n        tagName: \"p\",\n        value: blockBody,\n        className: \"custom-cta-description\",\n        style: {\n          textAlign: blockBodyAlignment\n        }\n      }));\n    }\n  });\n}; //registerBlockType('gutbcontent/custom-cta'\n\n\nexports.registerCustomCTABlock = registerCustomCTABlock;\nvar registerCustomCTABlock;\nexports.registerCustomCTABlock = registerCustomCTABlock;\n\n},{}],2:[function(require,module,exports){\n\"use strict\";\n\nvar _customCallToAction = require(\"./custom-call-to-action\");\n\n(0, _customCallToAction.registerCustomCTABlock)();\n\n},{\"./custom-call-to-action\":1}]},{},[2]);\n"],"file":"gutbcontent-gutenberg-blocks.js"}