{"version":3,"names":[],"mappings":"","sources":["gutbcontent-admin.js"],"sourcesContent":["(function(){function r(e,n,t){function o(i,f){if(!n[i]){if(!e[i]){var c=\"function\"==typeof require&&require;if(!f&&c)return c(i,!0);if(u)return u(i,!0);var a=new Error(\"Cannot find module '\"+i+\"'\");throw a.code=\"MODULE_NOT_FOUND\",a}var p=n[i]={exports:{}};e[i][0].call(p.exports,function(r){var n=e[i][1][r];return o(n||r)},p,p.exports,r,e,n,t)}return n[i].exports}for(var u=\"function\"==typeof require&&require,i=0;i<t.length;i++)o(t[i]);return o}return r})()({1:[function(require,module,exports){\n\"use strict\";\n\nvar _checkbox = require(\"./modules/checkbox.js\");\n\n/* Import user-defined modules  */\n//import { checkboxToggleStatus, add_click_event_listener_to_checkbox } from './admin-modules/checkbox.js';\n//import 'code-prettify';\n\n/* I. Vanilla JS - trigger when windows load */\nwindow.addEventListener(\"load\", function () {\n  /* I. External module initialization */\n  //PR.prettyPrint();\n\n  /*** Dashboard page - toggle checkbox selection ****/\n  (0, _checkbox.add_click_event_listener_to_checkbox)();\n  /*** Dashboard page - tabs selection\r\n   * 1. Store variables here\r\n   * 2. Grab all the tabs in an array tabs\r\n   ****/\n\n  var tabs = document.querySelectorAll(\"ul.nav-tabs > li\");\n  /* Open the dedicated tabs when user click */\n\n  /*** - Iterate through tabs array, add event listener to each tab ***/\n\n  for (var i = 0; i < tabs.length; i++) {\n    // console.log( 'Current tab item is : ' +  tabs[i] );\n    tabs[i].addEventListener(\"click\", switchTab);\n  }\n\n  function switchTab(event) {\n    /* 1. Remove active class in tab panel in panel navigation & the corresponsding panels */\n    //console.log(event); // OK\n    document.querySelector(\"ul.nav-tabs li.active\").classList.remove(\"active\");\n    document.querySelector(\"div.tab-pane.active\").classList.remove(\"active\");\n    /* 2. Add active class to current tab navigation & tab container */\n\n    /* 2.1. Tab navigations */\n    // Get the current active tab naviagation:\n\n    var clickedTab = event.currentTarget;\n    /* event.currentTarget: <li><a href=\"#tab-2\">Updates</a></li> */\n\n    var anchor = event.target;\n    /* event.target: <a href=\"#tab-2\">Updates</a> */\n\n    var activePaneID = anchor.getAttribute(\"href\");\n    /* .getAttribute(\"href\") => #tab-2 */\n    //console.log(activePaneID);\n    // add active class to tab navigation\n\n    clickedTab.classList.add(\"active\"); //clickedTab.preventDefault();  // prevent from adding tab-2, tab-3\n\n    /* 2.2. Tab container */\n    // Find the tab-id, then assign class \"active\"\n\n    document.querySelector(activePaneID).classList.add(\"active\");\n    window.scrollTo(1000, 0);\n  }\n}); //window.addEventListener(\"load\", function(){\n\n/* II. JS framework - jQuery - trigger when document is ready */\n\njQuery(document).ready(function ($) {\n  /* Generic declaration */\n  //let pluginRootDir = '/wp-content/plugins/devsunshine-plugin';\n\n  /* I. Import scripts from external modules */\n\n  /*let checkboxModuleScriptPath = pluginRootDir.concat('/assets/js/admin-modules/checkbox.js');\r\n  let checkboxModuleScript = document.createElement(\"script\");\r\n  checkboxModuleScript.src = checkboxModuleScriptPath;  // OK\r\n  document.head.appendChild(checkboxModuleScript);*/\n\n  /* II. */\n\n  /* Declare click event for button\r\n  * - Tap the WordPress Media Uploader for the Upload Image of plugin Widget\r\n  * (assigned the classname .devsunshine-widget-js-image-upload) */\n  $(document).on('click', '.devsunshine-widget-js-image-upload', function (e) {\n    e.preventDefault();\n    var $uploadButton = $(this); // refer to $('.devsunshine-widget-js-image-upload')\n    // Store WordPress Media Uploader\n\n    var fileFrame = wp.media.frames.file_frame = wp.media({\n      title: 'Select or Upload an Image',\n      library: {\n        type: 'image' // mime type\n\n      },\n      button: {\n        text: 'Select Image'\n      },\n      multiple: false // select only single image\n\n    }); // wp.media.frames.file_frame = wp.media({\n\n    fileFrame.on('select', function () {\n      /* Get attached file selected by user, store in the variable 'attachedItem'\r\n      * (Ignore the order)\r\n      * 1. Tap the file selected by the user via variable \"fileFrame\"\r\n      * 2. Check the state if being selected or not - method state()\r\n      * 3. Get users selection - method get('selection')\r\n      * 4. Obtain the 1st item in user selection - method first()\r\n      * 5. Convert to JSON format - method toJSON()\r\n      * */\n      var attachedItem = fileFrame.state().get('selection').first().toJSON();\n      /*\r\n      * - Find the sibling elements (elements have same depth in DOM structure)\r\n      * + This element contains the classname '.devsunshine-widget-image-upload'\r\n      * - Assign the value is URL of attached item (attachedItem.url)\r\n      * - Trigger 'change' event to activate the \"save change\" button\r\n      * */\n\n      $uploadButton.siblings('.devsunshine-widget-image-upload').val(attachedItem.url).trigger('change');\n    }); // Trigger the Media Uploader\n\n    fileFrame.open(); // Enable the save button\n  }); //$(document).on('click','.devsunshine-widget-js-image-upload', function(e){\n}); //jQuery(document).ready(function($){\n\n},{\"./modules/checkbox.js\":2}],2:[function(require,module,exports){\n\"use strict\";\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.add_click_event_listener_to_checkbox = add_click_event_listener_to_checkbox;\nexports.checkboxToggleStatus = checkboxToggleStatus;\n\nfunction add_click_event_listener_to_checkbox() {\n  /*** Dashboard page - toggle checkbox selection ****/\n  var settingCheckboxes = document.querySelectorAll(\"div.ui-toggle\"); //console.log( 'Number of item ' + settingCheckboxes.length );\n\n  for (var i = 0; i < settingCheckboxes.length; i++) {\n    //console.log( 'Current checkbox item is : ' +  settingCheckboxes[i] );\n    //let toggleBox = settingCheckboxes[i].querySelector('label');\n    // settingCheckboxes[i].addEventListener(\"click\", checkboxToggleStatus); // OK\n    settingCheckboxes[i].querySelector('label.item-checkbox-label').addEventListener(\"click\", checkboxToggleStatus); // toggleBox.addEventListener(\"click\", checkboxToggleStatus);\n  }\n}\n\nfunction checkboxToggleStatus(event) {\n  event.preventDefault();\n  var clickedCheckbox = event.currentTarget; //console.log('value of clicked checkbox : ');\n  //console.log(  clickedCheckbox );   // Display a very detail objects\n\n  var checkbox = clickedCheckbox.parentNode.querySelector('input.ui-toggle'); // Get HTML elements of input tab\n  //let toggleBox = clickedCheckbox.querySelector('label');\n  //console.log('value of input field : ');\n  //console.log(  checkbox );\n\n  if (checkbox.hasAttribute('checked')) {\n    //console.log('Current checkbox is checked');\n    checkbox.removeAttribute('checked');\n  } else {\n    //console.log('Current checkbox is NOT checked');\n    checkbox.setAttribute('checked', '');\n  }\n}\n/*\r\n\r\nwindow.addEventListener(\"load\", function(){\r\n\r\n  /!*** Dashboard page - toggle checkbox selection ****!/\r\n  var settingCheckboxes = document.querySelectorAll(\"div.ui-toggle\");\r\n\r\n  //console.log( 'Number of item ' + settingCheckboxes.length );\r\n  for(let i = 0; i < settingCheckboxes.length; i++){\r\n    //console.log( 'Current checkbox item is : ' +  settingCheckboxes[i] );\r\n    //let toggleBox = settingCheckboxes[i].querySelector('label');\r\n    settingCheckboxes[i].addEventListener(\"click\", checkboxToggleStatus); //\r\n    // toggleBox.addEventListener(\"click\", checkboxToggleStatus);\r\n  }\r\n\r\n  function checkboxToggleStatus(event){\r\n    let clickedCheckbox = event.currentTarget;\r\n    //console.log('value of clicked checkbox : ');\r\n    //console.log(  clickedCheckbox );   // Display a very detail objects\r\n\r\n    let checkbox = clickedCheckbox.querySelector('input.ui-toggle');  // Get HTML elements of input tab\r\n    let toggleBox = clickedCheckbox.querySelector('label');\r\n    //console.log('value of input field : ');\r\n    //console.log(  checkbox );\r\n    if(checkbox.hasAttribute('checked')){\r\n      //console.log('Current checkbox is checked');\r\n      checkbox.removeAttribute('checked');\r\n    }else{\r\n      //console.log('Current checkbox is NOT checked');\r\n      checkbox.setAttribute('checked','');\r\n    }\r\n  }\r\n\r\n});*/\n\n},{}]},{},[1]);\n"],"file":"gutbcontent-admin.js"}